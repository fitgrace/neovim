# ==================
# Documentation
# ==================
snippet /**
	/**
	 * ${1:description}
   *
	 * @param  {${2:type}} ${3:name} ${4:description}
   *
   * @return {${5:type}} ${0:description}
	 */
snippet @par
	@param {${1:type}} ${2:name} ${0:description}



# ==================
# Functions
# ==================
snippet fun
	function (${1}) {
		${0}
	}

snippet fn
  (${1}) => {
		${0}
	}

snippet cfn
  const ${1:function_name} = (${2}) => {
		${0}
	};

snippet (fn
	(function (${1}) {
		${0}
	}(${2}));

snippet timeout
	setTimeout(function () {${0}}${2}, ${1:10});



# ==================
# Flow control
# ==================
snippet if
	if (${1:true}) {
		${0}
	}

snippet ife
	if (${1:true}) {
		${2}
	} else {
		${0}
	}

snippet ter
	${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}

snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}

snippet case
	case '${1:case}':
		${2}
		break;
	${0}

snippet ret
	return ${0:result};



# ==================
# Loops
# ==================
snippet for
	for (let ${2:i} = 0, l = ${1:arr}.length; $2 < l; $2++) {
		let ${3:v} = $1[$2];${0:}
	}

snippet forr
	for (let ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2--) {
		let ${3:v} = $1[$2];${0:}
	}

snippet wh
	while (${1:/* condition */}) {
		${0}
	}

snippet do
	do {
		${0}
	} while (${1:/* condition */});

snippet fori
	for (var ${1:prop} in ${2:object}) {
		${0:$2[$1]}
	}



# ==================
# Objects
# ==================
snippet :f
	${1:method_name}: (${2:attribute}) => {
		${3}
	},



# ==================
# JSON
# ==================
snippet jsonp
	JSON.parse(${0:jstr});

snippet jsons
	JSON.stringify(${0:object});



# ==================
# DOM selectors
# ==================
snippet get
	getElementsBy${1:TagName}('${0}')

snippet gett
	getElementBy${1:Id}('${0}')



# ==================
# Debug
# ==================
snippet cl
	console.log(${0});



# ==================
# Misc
# ==================
snippet us
	'use strict';
